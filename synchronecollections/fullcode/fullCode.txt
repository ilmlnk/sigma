package synchrocollections;

import java.io.*;
import java.util.Scanner;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;

/*
*
* todo: Із використанням потокобезпечних колекцій пакету
*   java.util.concurrent створити синхронну багатопотокову систему для формування з
*   трьох текстових файлів колекції з кількістю повторень кожного слова ДОВЖИНОЮ
*   БІЛЬШЕ ОДНІЄЇ БУКВИ, В ЯКИХ СПІВПАДАЮТЬ ПЕРША ТА ОСТАННЯ
*   БУКВИ. НЕ ВИКОРИСТОВУВАТИ проміжне створення колекцій для прочитаного
*   тексту.
*
* */

public class RunSynchroCollections {
    public static void main(String[] args) {
        new ThreadController("C:\\Users\\ilmln\\IdeaProjects\\SynchroCollections\\src\\main\\java\\" +
                "synchrocollections\\files\\1");
        new ThreadController("C:\\Users\\ilmln\\IdeaProjects\\SynchroCollections\\src\\main\\java\\" +
                "synchrocollections\\files\\2");
        new ThreadController("C:\\Users\\ilmln\\IdeaProjects\\SynchroCollections\\src\\main\\java\\" +
                "synchrocollections\\files\\3");
    }
}

class Finder {
    public static boolean matchString(String str) {
        if (str.length() > 1) {
            return str.toLowerCase().charAt(0) == str.toLowerCase().charAt(str.length() - 1);
        }
        return false;
    }
}

class ThreadController implements Runnable {

    private ConcurrentHashMap<String, Integer> concurrentHashMap = new ConcurrentHashMap<>();
    private TreeSet<String> treeSet = new TreeSet<>();
    private String filePath;
    private File file;
    private Thread t;

    public ThreadController(String filePath) {
        this.filePath = filePath;
        this.file = new File(filePath);
        t = new Thread(this);
        t.start();
    }

    @Override
    public void run() {
        try (Scanner scanner = new Scanner(file)) {
            while (scanner.hasNext()) {
                String buffer = scanner.next();
                if (Finder.matchString(buffer)){
                    treeSet.add(buffer);
                    if (!concurrentHashMap.containsKey(buffer)) {
                        concurrentHashMap.put(buffer, 0);
                    }
                    concurrentHashMap.put(buffer, concurrentHashMap.get(buffer) + 1);
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            System.out.println(treeSet);
        }
        System.out.println(t.getName() + " " + concurrentHashMap);
    }
}
