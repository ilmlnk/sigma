/*
 *
 * todo: На площині задано N точок. Необхідно у файл LINES записати два HashMap:
 *   - із ключами у вигляді об’єктів класу Point, що визначаються цілими координатами
 *     точок, та значеннями у вигляді кількості прямих, що проходять через цю точку та, щонайменше,
 *     ще через одну точку,
 *   - із ключами у вигляді об’єктів класу Line, що визначаються параметрами К та В
 *     прямої y = K*x + B, та значеннями у вигляді кількості точок, що належать цій прямій.
 *
 *
 *
 * */


package collections;

import java.util.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Run {
    public static void main(String[] args) {
        Point p1 = new Point(0, 4);
        Point p2 = new Point(1, 6);

        Line l1 = new Line(2, 4);
        Line l2 = new Line(-2, 4);
        Line l3 = new Line(5, 10);
        Line l4 = new Line(10, 10);

        Line[] lines = new Line[]{l1, l2, l3, l4};
        Point[] points = new Point[]{p1, p2};

        System.out.println(PointsController.pointMapping(p1, lines));
        System.out.println(PointsController.pointMapping(p2, lines));

        System.out.println();
        System.out.println(LinearEquationController.pointBelongingToLine(l1, points));
        System.out.println(LinearEquationController.pointBelongingToLine(l2, points));
        System.out.println();
    }
}

class LinearEquationController {
    private static int belongingCount;
    public static String pointBelongingToLine(Line line, Point... points) {
        StringBuffer stringBuffer = new StringBuffer();
        HashMap<Line, Integer> lineMap = new HashMap<>();
        for (Point point : points) {
            if ((line.getK() * point.getX() + line.getB()) == point.getY()) {
                belongingCount++;
            } else {
                stringBuffer.append(point).append("\n");
            }
        }
        if (!stringBuffer.isEmpty()) {
            System.err.println("Intersections were not found in lines : \n" + stringBuffer);
        }

        lineMap.put(line, belongingCount);
        System.out.println("Amount of points which are on line: " + belongingCount);

        belongingCount = 0;
        String lineMapData = lineMap.toString();
        RecordData.recordCalculations(lineMapData);
        return lineMapData;
    }
}

class PointsController {
    private static int belongingCount;
    private static int intersectionCount;

    public static String pointMapping(Point point, Line... lines) {
        HashMap<Point, Integer> pointMap = new HashMap<>();
        StringBuffer stringBuffer = new StringBuffer();
        for (Line line : lines) {
            if (((line.getK() * point.getX() + line.getB()) == point.getY())) {
                belongingCount++;
                if (belongingCount >= 2) {
                    intersectionCount++;
                }
            } else {
                stringBuffer.append(line).append("\n");
            }
        }

        if(!stringBuffer.isEmpty()) {
            System.err.println("Intersections were not found : \n" + stringBuffer);
        }

        pointMap.put(point, intersectionCount);
        System.out.println("Intersections were found : " + intersectionCount + "!");

        intersectionCount = 0;
        String pointMapData = pointMap.toString();
        RecordData.recordCalculations(pointMapData);
        return pointMapData;
    }
}

class RecordData {
    private static final String FILE_DIRECTORY = "/home/ilmlnk/IdeaProjects/Level3/src/main/java/collections/files/";
    private static final String FILE_LOCATION = "LINES";

    public static boolean recordCalculations(String data) {
        File f1 = new File(FILE_DIRECTORY + FILE_LOCATION);
        try (FileWriter fileWriter = new FileWriter(f1, true)) {
            fileWriter.write(data + "\n");
        } catch (IOException e) {
            System.err.println("It is not possible to record data into file!");
        }
        return true;
    }
}
