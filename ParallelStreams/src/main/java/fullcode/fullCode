import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.Random;

class ParallelMapping {
    public static Map<Integer, Integer> parallelCountOfEvens(Integer[] numbs, int sortType) {
        Map<Integer, Integer> preparedMap = Arrays.stream(numbs)
                .parallel()
                .filter(x -> x % 2 == 0)
                .collect(Collectors.toMap(Function.identity(), value -> 1, Integer::sum));

        switch (sortType) {
            case 1 -> {
                System.out.println("Sorting By Key");
                return preparedMap.entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByKey())
                        .collect(Collectors
                                .toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            }

            case 2 -> {
                System.out.println("Sorting By Value");
                return preparedMap.entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByValue())
                        .collect(Collectors
                                .toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            }
        }
        return Collections.emptyMap();
    }

    public static Map<Integer, Integer> sequentialCountOfEvens(Integer[] numbs, int sortType) {
        Map<Integer, Integer> preparedMap = Arrays.stream(numbs)
                .sequential()
                .filter(x -> x % 2 == 0)
                .collect(Collectors.toMap(Function.identity(), value -> 1, Integer::sum));

        switch (sortType) {
            case 1 -> {
                System.out.println("Sorting By Key");
                return preparedMap.entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByKey())
                        .collect(Collectors
                                .toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            }

            case 2 -> {
                System.out.println("Sorting By Value");
                return preparedMap.entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByValue())
                        .collect(Collectors
                                .toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            }
        }
        return Collections.emptyMap();
    }
}

public class Dispatcher {
    public static void main(String[] args) {

        Random random = new Random();
        Integer[] arr = new Integer[10000000];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = random.nextInt(1000);
        }

        long startParallelTime = System.currentTimeMillis();
        System.out.println("Parallel Map : " + ParallelMapping.parallelCountOfEvens(arr, 2));
        System.out.println("Execution Time : " + (System.currentTimeMillis() - startParallelTime) + "ms");

        System.out.println("-".repeat(50));

        long startSequentialTime = System.currentTimeMillis();
        System.out.println("Sequential Map : " + ParallelMapping.sequentialCountOfEvens(arr, 2));
        System.out.println("Execution Time : " + (System.currentTimeMillis() - startSequentialTime) + "ms");
    }
}
